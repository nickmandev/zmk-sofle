#define ZMK_POINTING_DEFAULT_MOVE_VAL 1200  // 600
#define ZMK_POINTING_DEFAULT_SCRL_VAL 25   // 10

#include <input/processors.dtsi>
#include <zephyr/dt-bindings/input/input-event-codes.h>
#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/ext_power.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>
#include <dt-bindings/zmk/rgb.h>

&mmv_input_listener { input-processors = <&zip_xy_scaler 2 1>; };

&msc_input_listener { input-processors = <&zip_scroll_scaler 2 1>; };

&msc {
    acceleration-exponent = <1>;      // 0
    time-to-max-speed-ms = <100>;       // 300
    delay-ms = <0>;                   // 0
};

&mmv {
    time-to-max-speed-ms = <500>;
    acceleration-exponent = <1>;
    trigger-period-ms = <16>;
};

/ {
    scroll_encoder: scroll_encoder {
        compatible = "zmk,behavior-sensor-rotate";
        #sensor-binding-cells = <0>;
        bindings = <&msc SCRL_DOWN>, <&msc SCRL_UP>;

        tap-ms = <100>;
    };

    behaviors {
    };

    combos {
        compatible = "zmk,combos";

        Adjust_layer {
            bindings = <&mo 3>;
            key-positions = <56 60>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        layer0 {
            bindings = <
&kp ESC         &kp N1   &kp N2        &kp N3            &kp N4  &kp N5       &kp UP_ARROW     &kp N6     &kp N7  &kp N8         &kp N9           &kp N0    &kp TILDE
&kp TAB         &kp Q    &kp W         &kp E             &kp R   &kp T        &kp DOWN_ARROW   &kp Y      &kp U   &kp I          &kp O            &kp P     &kp EQUAL
&kp LEFT_SHIFT  &kp A    &kp S         &kp D             &kp F   &kp G        &kp LEFT_ARROW   &kp H      &kp J   &kp K          &kp L            &kp SEMI  &kp APOS
&kp LCTRL       &kp Z    &kp X         &kp C             &kp V   &kp B        &kp RIGHT_ARROW  &kp N      &kp M   &kp COMMA      &kp DOT          &kp FSLH  &kp RIGHT_SHIFT
&kp C_MUTE      &kp DEL  &kp LEFT_ALT  &kp LEFT_COMMAND  &mo 1   &kp SPACE    &kp ENTER        &kp ENTER  &mo 2   &kp BACKSPACE  &kp PRINTSCREEN  &kp HOME
            >;

            sensor-bindings = <&inc_dec_kp C_VOLUME_UP C_VOL_DN>;
            display-name = "LAYER0";
        };

        layer_1 {
            bindings = <
&studio_unlock  &kp F1           &kp F2       &kp F3        &kp F4      &kp F5         &mmv MOVE_UP     &kp F6     &kp F7                &kp F8                 &kp F9     &kp F10        &kp F11
&trans          &kp EXCLAMATION  &kp AT_SIGN  &kp HASH      &kp DOLLAR  &kp PERCENT    &mmv MOVE_DOWN   &kp EQUAL  &kp LEFT_BRACKET      &kp RIGHT_BRACKET      &kp GT     &kp PIPE       &kp F12
&trans          &kp CARET        &kp AMPS     &kp ASTERISK  &kp DOLLAR  &kp PERCENT    &mmv MOVE_LEFT   &kp MINUS  &kp LEFT_BRACE        &kp RIGHT_BRACE        &kp UNDER  &kp SLASH      &kp PIPE
&trans          &trans           &trans       &trans        &trans      &trans         &mmv MOVE_RIGHT  &kp TILDE  &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &kp GRAVE  &kp BACKSLASH  &trans
&kp C_MUTE      &studio_unlock   &trans       &trans        &trans      &trans         &mkp LCLK        &trans     &trans                &trans                 &trans     &trans
            >;

            display-name = "layer1";
            sensor-bindings = <&scroll_encoder>;
        };

        layer_2 {
            bindings = <
&bt BT_CLR  &bt BT_SEL 0    &bt BT_SEL 1    &bt BT_SEL 2     &bt BT_SEL 3  &bt BT_SEL 4    &mmv MOVE_UP     &trans           &trans            &trans      &trans      &trans  &trans
&kp CAPS    &mkp LCLK       &mmv MOVE_UP    &mkp RCLK        &trans        &trans          &mmv MOVE_DOWN   &kp PRINTSCREEN  &kp INSERT        &kp END     &kp K_LOCK  &trans  &trans
&trans      &mmv MOVE_LEFT  &mmv MOVE_DOWN  &mmv MOVE_RIGHT  &trans        &trans          &mmv MOVE_LEFT   &kp C_PREVIOUS   &kp C_PLAY_PAUSE  &kp C_NEXT  &trans      &trans  &trans
&trans      &kp K_COPY      &kp K_PASTE     &kp K_UNDO       &kp INS       &trans          &mmv MOVE_RIGHT  &trans           &trans            &trans      &trans      &trans  &trans
&trans      &trans          &trans          &trans           &trans        &trans          &mkp LCLK        &trans           &trans            &trans      &trans      &trans
            >;

            sensor-bindings = <&scroll_encoder>;
        };

        layer_3 {
            bindings = <
&bt BT_CLR         &bt BT_SEL 0     &bt BT_SEL 1     &bt BT_SEL 2     &bt BT_SEL 3     &bt BT_SEL 4       &trans  &trans  &trans  &trans  &trans  &trans  &trans
&ext_power EP_TOG  &rgb_ug RGB_HUD  &rgb_ug RGB_HUI  &rgb_ug RGB_SAD  &rgb_ug RGB_SAI  &rgb_ug RGB_EFF    &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans             &rgb_ug RGB_BRD  &rgb_ug RGB_BRI  &trans           &trans           &trans             &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans             &trans           &trans           &trans           &trans           &trans             &trans  &trans  &trans  &trans  &trans  &trans  &trans
&rgb_ug RGB_TOG    &trans           &trans           &trans           &trans           &trans             &trans  &trans  &trans  &trans  &trans  &trans
            >;
        };
    };
};
